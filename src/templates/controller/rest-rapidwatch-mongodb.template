import { Controller, Get, Post, Put, Delete, Req, Res, RapidTags, RapidOperation, RapidResponse, RapidParam, RapidBody, RapidSchema } from '@angelitosystems/rapidfast';
import { Request, Response } from 'express';
import { ${PascalCase}Service } from './${kebabCase}.service';

@Controller('/${kebabCase}s')
@RapidTags(['${PascalCase}'])
@RapidSchema({
  type: 'object',
  properties: {
    id: { type: 'string', description: 'ID único del ${camelCase}' },
    // Agrega aquí las propiedades de tu modelo
    createdAt: { type: 'string', format: 'date-time' },
    updatedAt: { type: 'string', format: 'date-time' }
  }
})
export class ${PascalCase}Controller {
  constructor(private readonly ${camelCase}Service: ${PascalCase}Service) {}

  @Get()
  @RapidOperation({ 
    summary: 'Listar ${camelCase}s',
    description: 'Obtiene una lista de todos los ${camelCase}s'
  })
  @RapidResponse(200, 'Lista de ${camelCase}s obtenida correctamente', {
    type: 'array',
    items: { $ref: '#/components/schemas/${PascalCase}' }
  })
  async findAll(@Res() res: Response) {
    const items = await this.${camelCase}Service.findAll();
    return res.json(items);
  }

  @Get(':id')
  @RapidOperation({ 
    summary: 'Obtener ${camelCase}',
    description: 'Obtiene un ${camelCase} por su ID'
  })
  @RapidParam('id', 'ID del ${camelCase}', { in: 'path', required: true })
  @RapidResponse(200, '${PascalCase} encontrado', {
    $ref: '#/components/schemas/${PascalCase}'
  })
  @RapidResponse(404, '${PascalCase} no encontrado')
  async findOne(@Req() req: Request, @Res() res: Response) {
    const item = await this.${camelCase}Service.findOne(req.params.id);
    if (!item) {
      return res.status(404).json({
        message: '${PascalCase} no encontrado'
      });
    }
    return res.json(item);
  }

  @Post()
  @RapidOperation({ 
    summary: 'Crear ${camelCase}',
    description: 'Crea un nuevo ${camelCase}'
  })
  @RapidBody('Datos del ${camelCase}', {
    required: true,
    content: {
      'application/json': {
        schema: { $ref: '#/components/schemas/${PascalCase}' }
      }
    }
  })
  @RapidResponse(201, '${PascalCase} creado correctamente', {
    $ref: '#/components/schemas/${PascalCase}'
  })
  @RapidResponse(400, 'Datos inválidos')
  async create(@Req() req: Request, @Res() res: Response) {
    const item = await this.${camelCase}Service.create(req.body);
    return res.status(201).json(item);
  }

  @Put(':id')
  @RapidOperation({ 
    summary: 'Actualizar ${camelCase}',
    description: 'Actualiza un ${camelCase} existente'
  })
  @RapidParam('id', 'ID del ${camelCase}', { in: 'path', required: true })
  @RapidBody('Datos actualizados del ${camelCase}', {
    required: true,
    content: {
      'application/json': {
        schema: { $ref: '#/components/schemas/${PascalCase}' }
      }
    }
  })
  @RapidResponse(200, '${PascalCase} actualizado correctamente', {
    $ref: '#/components/schemas/${PascalCase}'
  })
  @RapidResponse(404, '${PascalCase} no encontrado')
  async update(@Req() req: Request, @Res() res: Response) {
    const item = await this.${camelCase}Service.update(
      req.params.id,
      req.body
    );
    if (!item) {
      return res.status(404).json({
        message: '${PascalCase} no encontrado'
      });
    }
    return res.json(item);
  }

  @Delete(':id')
  @RapidOperation({ 
    summary: 'Eliminar ${camelCase}',
    description: 'Elimina un ${camelCase} existente'
  })
  @RapidParam('id', 'ID del ${camelCase}', { in: 'path', required: true })
  @RapidResponse(200, '${PascalCase} eliminado correctamente')
  @RapidResponse(404, '${PascalCase} no encontrado')
  async remove(@Req() req: Request, @Res() res: Response) {
    const item = await this.${camelCase}Service.remove(req.params.id);
    if (!item) {
      return res.status(404).json({
        message: '${PascalCase} no encontrado'
      });
    }
    return res.json({
      message: '${PascalCase} eliminado correctamente'
    });
  }
} 